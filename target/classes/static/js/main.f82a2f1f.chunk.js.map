{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","state","data","name","brand","price","quantity","handleChange","event","target","_this","setState","value","handleSubmit","preventDefault","renderEditable","cellInfo","react_default","a","createElement","style","backgroundColor","contentEditable","suppressContentEditableWarning","onBlur","e","row","index","column","id","innerHTML","listPrimitive","update","dangerouslySetInnerHTML","__html","push","this","className","src","logo","alt","onSubmit","type","onChange","es","columns","Header","accessor","Cell","d","defaultPageSize","_this2","fetch","then","res","json","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"8RAMqBA,oNAEnBC,MAAQ,CACJC,KAAM,GACNC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,SAAU,MAIdC,aAAe,SAAAC,GACa,SAAtBA,EAAMC,OAAON,MACfO,EAAKC,SAAS,CAAER,KAAMK,EAAMC,OAAOG,QACX,UAAtBJ,EAAMC,OAAON,MACfO,EAAKC,SAAS,CAAEP,MAAOI,EAAMC,OAAOG,QACZ,UAAtBJ,EAAMC,OAAON,MACfO,EAAKC,SAAS,CAAEN,MAAOG,EAAMC,OAAOG,QACZ,aAAtBJ,EAAMC,OAAON,MACfO,EAAKC,SAAS,CAAEL,SAAUE,EAAMC,OAAOG,WAG3CC,aAAe,SAAAL,GACbA,EAAMM,oBAGRC,eAAiB,SAAAC,GACf,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,gBAAiB,WAC1BC,iBAAe,EACfC,gCAA8B,EAC9BC,OAAQ,SAAAC,GACN,IAAIC,EAAMhB,EAAKT,MAAMC,KAAKc,EAASW,OACnCD,EAAIV,EAASY,OAAOC,IAAMJ,EAAEhB,OAAOqB,UACnCpB,EAAKqB,cAAcC,OAAOhB,EAASW,MAAOD,IAE5CO,wBAAyB,CACvBC,OAAQxB,EAAKT,MAAMC,KAAKc,EAASW,OAAOX,EAASY,OAAOC,UA0GhEhB,aAAe,SAAAL,GACbE,EAAKqB,cAAcI,KAAK,CACpBhC,KAAMO,EAAKT,MAAME,KACjBC,MAAOM,EAAKT,MAAMG,MAClBC,MAAOK,EAAKT,MAAMI,MAClBC,SAAUI,EAAKT,MAAMK,WAEzBI,EAAKC,SAAS,CAAER,KAAM,GAAIC,MAAO,GAAIC,MAAO,GAAIC,SAAS,KACzDE,EAAMM,0FA5GC,IACCZ,EAASkC,KAAKnC,MAAdC,KACR,OACEe,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,OACbpB,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,cACbpB,EAAAC,EAAAC,cAAA,OAAKmB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCvB,EAAAC,EAAAC,cAAA,MAAIkB,UAAU,aAAd,0BAEFpB,EAAAC,EAAAC,cAAA,KAAGkB,UAAU,aACXpB,EAAAC,EAAAC,cAAA,QAAMsB,SAAUL,KAAKvB,cACnBI,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,qBAEEF,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLvC,KAAK,OACLS,MAAOwB,KAAKnC,MAAME,KAClBwC,SAAUP,KAAK7B,gBAEV,IACTU,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLvC,KAAK,QACLS,MAAOwB,KAAKnC,MAAMG,MAClBuC,SAAUP,KAAK7B,gBAEV,IACTU,EAAAC,EAAAC,cAAA,sBAEEF,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLvC,KAAK,QACLS,MAAOwB,KAAKnC,MAAMI,MAClBsC,SAAUP,KAAK7B,gBAEV,IACTU,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLvC,KAAK,WACLS,MAAOwB,KAAKnC,MAAMK,SAClBqC,SAAUP,KAAK7B,gBAGnBU,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,SAAS9B,MAAM,UAG/BK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACE1C,KAAMA,EACN2C,QAAS,CACP,CACEC,OAAQ,OACRC,SAAU,OACVC,KAAMZ,KAAKrB,gBAEb,CACE+B,OAAQ,QACRC,SAAU,QACVC,KAAMZ,KAAKrB,gBAEb,CACE+B,OAAQ,QACRC,SAAU,QACVC,KAAMZ,KAAKrB,gBAEb,CACE+B,OAAQ,WACRC,SAAU,WACVC,KAAMZ,KAAKrB,gBAEb,CACE+B,OAAQ,iBACRjB,GAAI,WACJkB,SAAU,SAAAE,GAAC,OACThC,EAAAC,EAAAC,cAAA,OACEc,wBAAyB,CACvBC,OAAQe,EAAE9C,KAAO,IAAM8C,EAAE7C,YAMnC8C,gBAAiB,GACjBb,UAAU,sEAOA,IAAAc,EAAAf,KAChBgB,MAAK,+CACFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GAAI,OAAIJ,EAAKxC,SAAS,CAAET,KAAMqD,aA7IXC,cCMbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,KAAK,SAAAiB,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f82a2f1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\n\r\nexport default class App extends Component {\r\n  \r\n  state = {\r\n      data: [],\r\n      name: \"\",\r\n      brand: \"\",\r\n      price: \"\",\r\n      quantity: \"\"\r\n    };\r\n  \r\n\r\n  handleChange = event => {\r\n    if (event.target.name === \"name\")\r\n      this.setState({ name: event.target.value });\r\n    if (event.target.name === \"brand\")\r\n      this.setState({ brand: event.target.value });\r\n    if (event.target.name === \"price\")\r\n      this.setState({ price: event.target.value });\r\n    if (event.target.name === \"quantity\")\r\n      this.setState({ quantity: event.target.value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  renderEditable = cellInfo => {\r\n    return (\r\n      <div\r\n        style={{ backgroundColor: \"#fafafa\" }}\r\n        contentEditable\r\n        suppressContentEditableWarning\r\n        onBlur={e => {\r\n          let row = this.state.data[cellInfo.index];\r\n          row[cellInfo.column.id] = e.target.innerHTML;\r\n          this.listPrimitive.update(cellInfo.index, row);\r\n        }}\r\n        dangerouslySetInnerHTML={{\r\n          __html: this.state.data[cellInfo.index][cellInfo.column.id]\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Spring boot test task</h1>\r\n        </div>\r\n        <p className=\"App-intro\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <h3>Add new product</h3>\r\n            <label>\r\n              Name:\r\n              <input\r\n                type=\"text\"\r\n                name=\"name\"\r\n                value={this.state.name}\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>{\" \"}\r\n            <label>\r\n              Brand:\r\n              <input\r\n                type=\"text\"\r\n                name=\"brand\"\r\n                value={this.state.brand}\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>{\" \"}\r\n            <label>\r\n              Price:\r\n              <input\r\n                type=\"text\"\r\n                name=\"price\"\r\n                value={this.state.price}\r\n                onChange={this.handleChange}\r\n              />\r\n            </label>{\" \"}\r\n            <label>\r\n              Quantity:\r\n              <input\r\n                type=\"text\"\r\n                name=\"quantity\"\r\n                value={this.state.quantity}\r\n                onChange={this.handleChange}\r\n              />\r\n            </label> \r\n            <input type=\"submit\" value=\"Add\" />\r\n          </form>\r\n        </p>\r\n        <div>\r\n          <ReactTable\r\n            data={data}\r\n            columns={[\r\n              {\r\n                Header: \"Name\",\r\n                accessor: \"name\",\r\n                Cell: this.renderEditable\r\n              },\r\n              {\r\n                Header: \"Brand\",\r\n                accessor: \"brand\",\r\n                Cell: this.renderEditable\r\n              },\r\n              {\r\n                Header: \"Price\",\r\n                accessor: \"price\",\r\n                Cell: this.renderEditable\r\n              },\r\n              {\r\n                Header: \"Quantity\",\r\n                accessor: \"quantity\",\r\n                Cell: this.renderEditable\r\n              },\r\n              {\r\n                Header: \"Name and Brand\",\r\n                id: \"prioduct\",\r\n                accessor: d => (\r\n                  <div\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: d.name + \" \" + d.brand\r\n                    }}\r\n                  />\r\n                )\r\n              }\r\n            ]}\r\n            defaultPageSize={10}\r\n            className=\"-striped -highlight\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n      fetch(`https://mydomenfortesting.com/api/products/`)\r\n        .then(res => res.json())\r\n        .then(json => this.setState({ data: json }));\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    this.listPrimitive.push({\r\n        name: this.state.name,\r\n        brand: this.state.brand,\r\n        price: this.state.price,\r\n        quantity: this.state.quantity\r\n    });\r\n    this.setState({ name: \"\", brand: \"\", price: \"\", quantity:\"\" });\r\n    event.preventDefault();\r\n  };\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.dffcff72.svg\";"],"sourceRoot":""}